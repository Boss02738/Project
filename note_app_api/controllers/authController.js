const bcrypt = require('bcrypt');
const pool = require('../models/db');
const { genOTP } = require('../utils/otp');
const { sendOTP } = require('../utils/mailer');

const OTP_EXPIRE_MIN = Number(process.env.OTP_EXPIRE_MIN || 5);
const RESEND_COOLDOWN = Number(process.env.OTP_RESEND_COOLDOWN_SEC || 60);

// helper ‡∏ï‡∏£‡∏ß‡∏à email ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ @ku.th
function isValidKuEmail(email) {
  return /^[^@]+@ku\.th$/.test(email);
}

// üîπ Step 1: Request OTP
const startRegister = async (req, res) => {
  const { username, email, password } = req.body;
  if (!username || !email || !password)
    return res.status(400).json({ message: '‡∏Å‡∏£‡∏≠‡∏Å username, email, password ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö' });

  // email ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô @ku.th
  if (!isValidKuEmail(email)) {
    return res.status(400).json({ message: '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏• @ku.th ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô' });
  }

  try {
    // ‡∏Å‡∏±‡∏ô username/email ‡∏ã‡πâ‡∏≥‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏£‡∏Å
    const dupeUser = await pool.query('SELECT 1 FROM public.users WHERE username=$1', [username]);
    if (dupeUser.rowCount > 0) return res.status(409).json({ message: 'Username ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß' });

    const dupeEmail = await pool.query('SELECT 1 FROM public.users WHERE email=$1', [email]);
    if (dupeEmail.rowCount > 0) return res.status(409).json({ message: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß' });

    // ‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå OTP
    const last = await pool.query(`
      SELECT created_at FROM public.verification_password
      WHERE email=$1 AND purpose='register'
      ORDER BY created_at DESC LIMIT 1`, [email]);

    if (last.rowCount > 0) {
      const diff = (Date.now() - new Date(last.rows[0].created_at).getTime()) / 1000;
      if (diff < RESEND_COOLDOWN) {
        return res.status(429).json({
          message: `‡∏Ç‡∏≠ OTP ‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡πÉ‡∏ô ${Math.ceil(RESEND_COOLDOWN - diff)} ‡∏ß‡∏¥`,
          retry_after_sec: Math.ceil(RESEND_COOLDOWN - diff)
        });
      }
    }

    const otp = genOTP(6);
    const now = new Date();
    const expiresAt = new Date(now.getTime() + OTP_EXPIRE_MIN * 60 * 1000);

    // ‡∏•‡∏ö OTP ‡πÄ‡∏Å‡πà‡∏≤ (‡∏Å‡∏±‡∏ô‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß)
    await pool.query(`DELETE FROM public.verification_password WHERE email=$1 AND purpose='register'`, [email]);

    await pool.query(`
      INSERT INTO public.verification_password(email, otp, purpose, expires_at)
      VALUES ($1,$2,'register',$3)`, [email, otp, expiresAt]);

    await sendOTP(email, otp, OTP_EXPIRE_MIN);

    res.json({
      message: '‡∏™‡πà‡∏á OTP ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏µ‡πÄ‡∏°‡∏•',
      email,
      ttl_min: OTP_EXPIRE_MIN,
      now: now.toISOString(),
      expiresAt: expiresAt.toISOString(),
      resend_after_sec: RESEND_COOLDOWN,
    });
  } catch (err) {
    console.error('startRegister error:', err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
  }
};

// üîπ Step 2: Verify OTP & Register
const verifyRegister = async (req, res) => {
  const { username, email, password, otp } = req.body;
  if (!username || !email || !password || !otp)
    return res.status(400).json({ message: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö' });

  if (!isValidKuEmail(email)) {
    return res.status(400).json({ message: '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏• @ku.th ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô' });
  }

  try {
    const q = await pool.query(`
      SELECT id, expires_at FROM public.verification_password
      WHERE email=$1 AND otp=$2 AND purpose='register'
      ORDER BY created_at DESC LIMIT 1`, [email, otp]);

    if (q.rowCount === 0) return res.status(400).json({ message: 'OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    if (new Date(q.rows[0].expires_at).getTime() < Date.now())
      return res.status(400).json({ message: 'OTP ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß' });

    // ‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏≠‡∏µ‡∏Å‡∏ä‡∏±‡πâ‡∏ô
    const dupeUser = await pool.query('SELECT 1 FROM public.users WHERE username=$1', [username]);
    if (dupeUser.rowCount > 0) return res.status(409).json({ message: 'Username ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß' });

    const dupeEmail = await pool.query('SELECT 1 FROM public.users WHERE email=$1', [email]);
    if (dupeEmail.rowCount > 0) return res.status(409).json({ message: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß' });

    // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏à‡∏£‡∏¥‡∏á
    const hash = await bcrypt.hash(password, 10);
    await pool.query(`
      INSERT INTO public.users(username, password, email, email_verified)
      VALUES ($1,$2,$3,true)`, [username, hash, email]);

    // ‡∏•‡∏ö OTP ‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ
    await pool.query('DELETE FROM public.verification_password WHERE id=$1', [q.rows[0].id]);
    res.json({ message: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    console.error('verifyRegister error:', err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
  }
};

// üîπ Step 3: Resend OTP
const resendOtp = async (req, res) => {
  const { email } = req.body;
  if (!email) return res.status(400).json({ message: '‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà email' });

  if (!isValidKuEmail(email)) {
    return res.status(400).json({ message: '‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏• @ku.th ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô' });
  }

  try {
    const u = await pool.query('SELECT 1 FROM public.users WHERE email=$1', [email]);
    if (u.rowCount > 0) return res.status(409).json({ message: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡πâ‡∏ß' });

    const last = await pool.query(`
      SELECT created_at FROM public.verification_password
      WHERE email=$1 AND purpose='register'
      ORDER BY created_at DESC LIMIT 1`, [email]);

    if (last.rowCount > 0) {
      const diff = (Date.now() - new Date(last.rows[0].created_at).getTime()) / 1000;
      if (diff < RESEND_COOLDOWN) {
        return res.status(429).json({
          message: `‡∏Ç‡∏≠ OTP ‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡πÉ‡∏ô ${Math.ceil(RESEND_COOLDOWN - diff)} ‡∏ß‡∏¥`,
          retry_after_sec: Math.ceil(RESEND_COOLDOWN - diff)
        });
      }
    }

    const otp = genOTP(6);
    const now = new Date();
    const expiresAt = new Date(now.getTime() + OTP_EXPIRE_MIN * 60 * 1000);

    // ‡∏•‡∏ö OTP ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
    await pool.query(`DELETE FROM public.verification_password WHERE email=$1 AND purpose='register'`, [email]);

    await pool.query(`
      INSERT INTO public.verification_password(email, otp, purpose, expires_at)
      VALUES ($1,$2,'register',$3)`, [email, otp, expiresAt]);

    await sendOTP(email, otp, OTP_EXPIRE_MIN);

    res.json({
      message: '‡∏™‡πà‡∏á OTP ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß',
      email,
      ttl_min: OTP_EXPIRE_MIN,
      now: now.toISOString(),
      expiresAt: expiresAt.toISOString(),
      resend_after_sec: RESEND_COOLDOWN,
    });
  } catch (err) {
    console.error('resendOtp error:', err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
  }
};

const login = async (req, res) => {
  const { email, password } = req.body;
  if (!email || !password)
    return res.status(400).json({ message: '‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' });

  try {
    const result = await pool.query('SELECT * FROM public.users WHERE email=$1', [email]);
    if (result.rowCount === 0)
      return res.status(401).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ' });

    const user = result.rows[0];

    // ‡∏ï‡πâ‡∏≠‡∏á verify email ‡∏Å‡πà‡∏≠‡∏ô
    if (!user.email_verified) {
      return res.status(403).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' });
    }

    const match = await bcrypt.compare(password, user.password);
    if (!match)
      return res.status(401).json({ message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });

    // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    res.json({
      message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      user: {
        id: user.id_user,
        username: user.username,
        email: user.email,
      },
    });
  } catch (err) {
    console.error('login error:', err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
  }
};


module.exports = { startRegister, verifyRegister, resendOtp, login };
